{% extends 'base.html.twig' %}

{% block javascripts %}
    <!--suppress JSUnresolvedLibraryURL, HtmlFormInputWithoutLabel -->
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.8.0/dist/chart.min.js" integrity="sha256-cHVO4dqZfamRhWD7s4iXyaXWVK10odD+qp4xidFzqTI=" crossorigin="anonymous"></script>
{% endblock %}

{% block body %}
    <canvas id="myChart" style="max-width: 1200px; max-height: 800px"></canvas>

    <div id="app">
        <select v-model="selectedZodiacSign">
            <option value="-">Все</option>
            <option v-for="zodiacSign of zodiacSigns" :value="zodiacSign"><% zodiacSign %></option>
        </select>
        <button @click="show">Перестроить</button>
    </div>

    <script>
        const actresses = JSON.parse('{{ json|escape('js') }}');

        let years = {};
        let zodiacSigns = {};
        for (const actress of actresses) {
            const [year] = actress.dob.split('-');
            years[year] = true;
            zodiacSigns[actress.zodiacSign] = true;
        }
        years = Object.keys(years);
        zodiacSigns = Object.keys(zodiacSigns);

        new Vue({
            el: '#app',
            delimiters: ['<%','%>'],
            data: function () {
                return {
                    years: years,
                    chart: undefined,
                    actresses: actresses,
                    selectedZodiacSign: '-',
                    zodiacSigns: zodiacSigns,
                    context: document.getElementById('myChart').getContext('2d'),
                };
            },
            methods: {
                buildZodiacYear() {
                    const {selectedZodiacSign} = this;

                    const result = {};
                    this.actresses.map((item) => {
                        const {zodiacSign} = item;
                        if (undefined === result[zodiacSign]) {
                            result[zodiacSign] = {};
                        }

                        const [year] = item.dob.split('-');
                        if (undefined === result[zodiacSign][year]) {
                            result[zodiacSign][year] = 0;
                        }

                        result[zodiacSign][year]++;
                    });

                    if (undefined !== this.chart) {
                        this.chart.destroy();
                    }

                    const datasets = [];
                    if ('-' === selectedZodiacSign) {
                        for (const [zodiacSign, data] of Object.entries(result)) {
                            datasets.push({
                                data: data,
                                fill: false,
                                tension: 0.1,
                                label: zodiacSign,
                                borderColor: '#' + Math.floor(Math.random() * 16777215).toString(16),
                            });
                        }
                    } else {
                        datasets.push({
                            fill: false,
                            tension: 0.1,
                            label: selectedZodiacSign,
                            data: result[selectedZodiacSign],
                            borderColor: '#' + Math.floor(Math.random() * 16777215).toString(16),
                        });
                    }

                    this.chart = new Chart(this.context, {
                        type: 'line',
                        data: {datasets}
                    });
                },
                show() {
                    this.buildZodiacYear();
                }
            },
        });
    </script>
{% endblock %}